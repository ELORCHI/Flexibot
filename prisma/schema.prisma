datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String     @id // Discord user ID
  username  String
  avatar    String?
  email     String?
  guilds    Guild[] // A user can add the bot to multiple guilds
  createdAt DateTime   @default(now())
  UserRank  UserRank[]
}

model Guild {
  id        String          @id // Discord server ID
  name      String
  icon      String?
  addedById String? // Make the field optional by adding ?
  addedBy   User?           @relation(fields: [addedById], references: [id]) // Add ? to make the relation optional
  modLogs   ModerationLog[] // Moderation logs for this guild
  warnings  Warning[] // Warnings issued in this guild
  polls     Poll[] // Polls created in this guild
  createdAt DateTime        @default(now())
  Rank      Rank[]
  commands  Command[]
}

enum CommandCategory {
  INFO
  MODERATION
  UTILS
  ROLES
}

model Command {
  id              Int             @id @default(autoincrement())
  guildId         String
  name            String
  guild           Guild           @relation(fields: [guildId], references: [id])
  category        CommandCategory // Add this line
  allowedChannels String?
  ignoredChannels String?
  allowedRoles    String?
  ignoredRoles    String?
  enabled         Boolean         @default(true)
  description     String

  @@unique([guildId, name])
}

model Warning {
  id          String   @id @default(cuid()) // Unique ID for the warning
  guildId     String // Guild where the warning was issued
  guild       Guild    @relation(fields: [guildId], references: [id])
  userId      String // The user who was warned
  moderatorId String // The moderator who issued the warning
  reason      String?
  createdAt   DateTime @default(now())
}

model ModerationLog {
  id          String   @id @default(cuid()) // Unique ID for the moderation log
  guildId     String // Guild where the action occurred
  guild       Guild    @relation(fields: [guildId], references: [id])
  action      String // Type of action (e.g., "kick", "ban", "mute")
  targetId    String // The user who was targeted by the action
  moderatorId String // The moderator who performed the action
  reason      String?
  duration    Int? // Duration of the action (if applicable, e.g., mute duration)
  createdAt   DateTime @default(now())
}

model Poll {
  id        String       @id @default(cuid()) // Unique ID for the poll
  guildId   String // Guild where the poll was created
  guild     Guild        @relation(fields: [guildId], references: [id])
  question  String // The poll question
  options   PollOption[] // The poll options
  createdBy String // The user who created the poll
  createdAt DateTime     @default(now())
}

model PollOption {
  id     String @id @default(cuid()) // Unique ID for the poll option
  pollId String // References the poll
  poll   Poll   @relation(fields: [pollId], references: [id])
  text   String // Option text
  votes  Int    @default(0) // Number of votes for the option
}

model Rank {
  id        String     @id @default(cuid()) // Unique ID for the rank
  guildId   String // The guild where the rank exists
  guild     Guild      @relation(fields: [guildId], references: [id])
  roleName  String // Name of the rank/role
  rankName  String
  createdBy String // The user who created the rank
  createdAt DateTime   @default(now())
  UserRank  UserRank[]
}

model UserRank {
  id       String   @id @default(cuid())
  userId   String
  user     User     @relation(fields: [userId], references: [id])
  rankId   String
  rank     Rank     @relation(fields: [rankId], references: [id])
  joinedAt DateTime @default(now())

  @@unique([userId, rankId]) // Prevent duplicate entries
}
